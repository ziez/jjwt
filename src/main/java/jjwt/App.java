/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jjwt;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.conn.ssl.TrustAllStrategy;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.apache.http.util.EntityUtils;
import sun.reflect.generics.reflectiveObjects.NotImplementedException;

import java.io.IOException;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

public class App {

    class AccessKey {
        private String algorithm;
        private String data;

        public String getAlgorithm() {
            return algorithm;
        }

        public void setAlgorithm(String algorithm) {
            this.algorithm = algorithm;
        }

        public String getData() {
            return data;
        }

        public void setData(String data) {
            this.data = data;
        }
    }

    private static String baseUrl = "https://mobilekey.westeurope.cloudapp.azure.com/key4friends/api/account/";

    private HttpClient getHttpClient() throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException {
        return HttpClients
                .custom()
                .setSSLContext(new SSLContextBuilder().loadTrustMaterial(null, TrustAllStrategy.INSTANCE).build())
                .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)
                .build();
    }

    public AccessKey register(String email, String algorithm) throws IOException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {

        try {
            HttpClient httpClient = this.getHttpClient();

            HttpGet request = new HttpGet(baseUrl + "/register/" + email);
            request.addHeader("content-type", "application/json");
            request.addHeader("dev-Settings", "Token:Algorithm:" + algorithm);
            HttpResponse result = httpClient.execute(request);
            String json = EntityUtils.toString(result.getEntity(), "UTF-8");

            System.out.println("response: " + json);

            com.google.gson.Gson gson = new com.google.gson.Gson();
            AccessKey accessKey = gson.fromJson(json, AccessKey.class);

            System.out.println("Algorithm: " + accessKey.getAlgorithm());
            System.out.println("Data: " + accessKey.getData());

            return accessKey;

        } catch (Exception ex) {
            System.out.println("exception occurred: " + ex);
            throw ex;
        }
    }

    private String buildJwt(AccessKey key, String email) throws NoSuchAlgorithmException, InvalidKeySpecException {
        Map<String, Object> claims = new HashMap<>();
        claims.put("email", email);
        claims.put("mode", "registration");
        claims.put("jti", System.currentTimeMillis());

        Key signatureKey;
        SignatureAlgorithm signatureAlgorithm;

        if (key.algorithm.equals("RS512") || key.algorithm.equals("ES512")) {
            KeyFactory kf = KeyFactory.getInstance(key.algorithm.equals("RS512") ? "RSA" : "EC");
            PKCS8EncodedKeySpec keySpecPKCS8 = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(key.data));
            signatureKey = kf.generatePrivate(keySpecPKCS8);
            signatureAlgorithm = key.algorithm.equals("RS512") ? SignatureAlgorithm.RS512 : SignatureAlgorithm.ES512;
        } else if (key.algorithm.equals("HS384")) {
            signatureKey = Keys.hmacShaKeyFor(Base64.getDecoder().decode(key.data));
            signatureAlgorithm = SignatureAlgorithm.HS384;
        } else {
            throw new NotImplementedException();
        }

        Calendar exp = Calendar.getInstance();
        exp.add(Calendar.SECOND, 15);

        return Jwts.builder()
                .setClaims(claims)
                .setExpiration(exp.getTime())
                .signWith(signatureKey, signatureAlgorithm)
                .compact();
    }

    public void confirm(String email, AccessKey key) throws InvalidKeySpecException, IOException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {

        try {
            String jwt = this.buildJwt(key, email);
            System.out.println("JWT: " + jwt);

            HttpClient httpClient = this.getHttpClient();

            HttpGet request = new HttpGet(baseUrl + "/confirmemail/" + "123-789");
            request.addHeader("content-type", "application/json");
            request.addHeader("authorization", "bearer " + jwt);
            HttpResponse result = httpClient.execute(request);
            String json = EntityUtils.toString(result.getEntity(), "UTF-8");

            System.out.println("response code: " + result.getStatusLine());
            System.out.println("response data: " + json);
        } catch (Exception ex) {
            System.out.println("exception occurred: " + ex);
            throw ex;
        }
    }

    public static void main(String[] args) throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException, IOException, InvalidKeySpecException {
        String email = args[0];
        String algorithm = args[1];
        System.out.println("performing registration of email '" + email + "' using algorithm " + algorithm);

        App app = new App();
        AccessKey accessKey = app.register(email, algorithm);
        app.confirm(email, accessKey);
    }
}
